
<h4>formatting your log records</h4>

<p>in this session we are going to see how to generate a diagnostics
file for a system that organizes logrecords in a different way than
Python.  let's jump into the implementation, if you can write R you
surely won't need more explaination but will want to tell me how to
make this function faster, more readable, shorter...</p>

<code>
<R-global>formatter.fewsdiagnostics</R-global> <R-operator><-</R-operator> <R-reserved>function</R-reserved>(record) {<br/>
&nbsp; <R-reserved>if</R-reserved>(record$level <= loglevels[[<R-string>'INFO'</R-string>]])<br/>
&nbsp; &nbsp; level <R-operator><-</R-operator> 3<br/>
&nbsp; <R-reserved>else if</R-reserved>(record$level <= loglevels[[<R-string>'WARNING'</R-string>]])<br/>
&nbsp; &nbsp; level <R-operator><-</R-operator> 2<br/>
&nbsp; <R-reserved>else if</R-reserved>(record$level <= loglevels[[<R-string>'ERROR'</R-string>]])<br/>
&nbsp; &nbsp; level <R-operator><-</R-operator> 1<br/>
&nbsp; <R-reserved>else</R-reserved><br/>
&nbsp; &nbsp; level <R-operator><-</R-operator> 0<br/>
<br/>
&nbsp; sprintf(<R-string>'&nbsp; &lt;line level="%d" description="LizardScripter :: %s :: %s"/>\n'</R-string>, level, record$timestamp, record$msg)<br/>
}
</code>

<p>notice that the field <tt>$msg</tt> of a record is already
"formatted", as we have seen with <tt>logwarn('my %s is %d', 'name',
5)</tt>.  that part can be used but not undone any more.  </p>

<p>when you add a handler to a logger, you can use
the <tt>formatter</tt> parameter to associate to the handler a
function that takes a logrecord and returns a string.  the above
example function is such a function.  </p>

<p>the formatter you can associate to a handler can combine the tags
in the logrecord to produce a string.  the tags that are available in
a logrecord are: <tt>$logger</tt> (the name of the logger which
produced the record), <tt>$msg</tt>, <tt>$timestamp</tt>, <tt>$level</tt>
(numeric), <tt>$levelname</tt> (character).</p>

<p>if you don't specify the <tt>formatter</tt> parameter, the default
formatter is used, which looks like this:</p>

<code>
<R-global>defaultFormat</R-global> <R-operator><-</R-operator> <R-reserved>function</R-reserved>(record) {<br/>
&nbsp; text <R-operator><-</R-operator> paste(record$timestamp, paste(record$levelname, record$logger, record$msg, sep=<R-string>':'</R-string>))<br/>
}
</code>

<p>the rest of the code, just slightly simplified, showing how we (me
at my company) actually use this capability is given here.  </p><p>notice
that the 'diagnostics' handler we add will not handle <tt>DEBUG</tt>
logrecords.</p>

<code>
<R-global>setup.fewsdiagnostics</R-global> <R-operator><-</R-operator> <R-reserved>function</R-reserved>(filename) {<br/>
&nbsp; cat(<R-string>'&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n'</R-string>, file=filename, append=<R-constant>FALSE</R-constant>)<br/>
&nbsp; cat(<R-string>'&lt;Diag version="1.2" xmlns="..." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="...">\n'</R-string>, file=filename, append=<R-constant>FALSE</R-constant>)<br/>
&nbsp; addHandler(<R-string>'diagnostics'</R-string>,<br/>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  writeToFile, file=filename,<br/>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  logger=<R-string>'fews.diagnostics'</R-string>,<br/>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  formatter=formatter.fewsdiagnostics)<br/>
}<br/>
<br/>
<R-global>teardown.fewsdiagnostics</R-global> <R-operator><-</R-operator> <R-reserved>function</R-reserved>(filename) {<br/>
&nbsp; cat(<R-string>'&lt;/Diag>\n'</R-string>', file=filename, append=<R-constant>TRUE</R-constant>)<br/>
&nbsp; removeHandler(<R-string>'diagnostics'</R-string>, logger=<R-string>'fews.diagnostics'</R-string>)<br/>
}
</code>
